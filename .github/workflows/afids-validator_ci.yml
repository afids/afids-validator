name: AFIDs Validator CI/CD Workflow

on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review, closed]

jobs:
  test:
    name: Setup environment & test
    if: |
      github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6]

    steps:
      - name: Checkout pull request branch
        uses: actions/checkout@master
        with:
          ref: ${{ github.sha }}

      - name: Select Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache environment
        uses: actions/cache@v2
        id: cache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv

      - name: Install necessary requirements if required
        if: steps.cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install virtualenv
          python -m virtualenv ~/.afidsvenv
          source ~/.afidsvenv/bin/activate
          pip install -r requirements.txt

      - name: Test AFIDs validator
        shell: bash
        run: |
          source ~/.afidsvenv/bin/activate
          python -m unittest

  linting:
    name: Lint code
    needs: [test]
    if: github.event.pull_request.merged == false
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6]

    steps:
      - name: Checkout pull request branch
        uses: actions/checkout@master
        with:
          ref: ${{ github.sha }}

      - name: Select Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install black
        run: |
          python -m pip install --upgrade pip
          pip install black

      - name: Run black
        uses: wearerequired/lint-action@v1
        with:
          black: true
          black_args: "-l 79"
          black_extensions: py
          auto_fix: true

  assign:
    name: Reviewer assignment
    needs: [linting]
    runs-on: ubuntu-latest
    if: github.event.pull_request.assignee == null

    steps:
      - name: Assign reviewer
        uses: kentaro-m/auto-assign-action@v1.1.2
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"

  deploy:
    name: Heroku deployment
    needs: [test]
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true

    steps:
      - name: Checkout master
        uses: actions/checkout@master
        with:
          ref: refs/heads/master

      - name: Deploy heroku app
        uses: akhileshns/heroku-deploy@v3.0.4
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }} # Heroku API Key
          heroku_app_name: afids-validator # Heroku app name
          heroku_email: ${{ secrets.HEROKU_EMAIL }} # Heroku email
