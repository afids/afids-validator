name: AFIDs Validator CI/CD Workflow

on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]
  workflow_dispatch:

jobs:
  test:
    name: Setup environment & test
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == 'false'

    steps:
        - name: Checkout pull request branch
          uses: actions/checkout@master
          with:
              ref: ${{ github.sha }}

        - name: Select python version
          uses: actions/setup-python@v1
          with:
              python-version: '3.6.x'
        
        - name: Restore requirements from cache
          uses: actions/cache@v2
          id: cache
          with:
              path: .cache/pip
              key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
              restore-keys: |
                  ${{ runner.os }}-pip-
        
        - name: Install necessary requirements if required
          if: steps.cache.outputs.cache-hit != 'true'
          shell: bash
          run: |
            python -m pip install --upgrade pip
            pip install virtualenv --no-cache-dir
            python -m virtualenv `pwd`/.venv
            source `pwd`/.venv/bin/activate
            pip install -r requirements.txt --no-cache-dir

        - name: Test AFIDs validator
          shell: bash
          run: |
            source `pwd`/.venv/bin/activate
            python -m unittest

  assign:
    name: Reviewer assignment
    needs: [test]
    runs-on: ubuntu-latest
    if: github.event.pull_request.synchronize == 'false'

    steps:
      - name: Assign reviewer
        uses: kentar-m/auto-assign-actions@v1.0.1
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
