name: AFIDs Validator CI/CD Workflow

on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]

jobs:
  test:
    name: Setup environment & test
    if: github.event.pull_request.draft == 'false' || !contains(github.event.head_commit.message, '[skip ci]')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6]

    steps:
      - name: Checkout pull request branch
        uses: actions/checkout@master
        with:
          ref: ${{ github.sha }}

      - name: Select Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache environment
        uses: actions/cache@v2
        id: cache
        with:
          path: .cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install necessary requirements if required
        if: steps.cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install virtualenv
          python -m virtualenv ~/.afidsvenv
          source ~/.afidsvenv/bin/activate
          pip install -r requirements.txt 

      - name: Test AFIDs validator
        shell: bash
        run: |
          source `pwd`/.venv/bin/activate
          python -m unittest

  assign:
    name: Reviewer assignment
    needs: [test]
    runs-on: ubuntu-latest
    if: github.event.pull_request.synchronize == 'false'

    steps:
      - name: Assign reviewer
        uses: kentar-m/auto-assign-actions@v1.0.1
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
